# ðŸª„ This is your project's Sourcery configuration file.

# You can use it to get Sourcery working in the way you want, such as
# ignoring specific refactorings, skipping directories in your project,
# or writing custom rules.

# ðŸ“š For a complete reference to this file, see the documentation at
# https://docs.sourcery.ai/Configuration/Project-Settings/

# This file was auto-generated by Sourcery on 2023-01-24 at 15:08.

version: '1'  # The schema version of this config file

ignore: # A list of paths or files which Sourcery will ignore.
- .git
- venv
- .venv
- env
- .env
- .tox

rule_settings:
  enable:
  - default
  disable: []  # A list of rule IDs Sourcery will never suggest.
  rule_types:
  - refactoring
  - suggestion
  - comment
  python_version: '3.9' # A string specifying the lowest Python version your project supports. Sourcery will not suggest refactorings requiring a higher Python version.

rules:  # Find out more about custom rules here: https://docs.sourcery.ai/custom_rules/reference/
- id: my-custom-rule  # Stub created for you by Sourcery on 2023-01-24 at 15:08
  description: Add a description here
  pattern: |
    # Importing NumPy Library
    import numpy as np
    import sys
    import time

    start = time.perf_counter()

    # Reading number of unknowns
    n = 200

    # Making numpy array of n x n+1 size and initializing 
    # to zero for storing augmented matrix
    a = np.zeros((n,n+1))

    # Making numpy array of n size and initializing 
    # to zero for storing solution vector
    x = np.zeros(n)

    # Reading augmented matrix coefficients
    a = np.array([[1/(i+j) for i in range(1,n+2)] for j in range(n)])

    # Applying Gauss Elimination
    for i in range(n):
        if a[i][i] == 0.0:
            sys.exit('Divide by zero detected!')

        for j in range(i+1, n):
            ratio = a[j][i]/a[i][i]

            for k in range(n+1):
                a[j][k] = a[j][k] - ratio * a[i][k]

    # Back Substitution
    x[n-1] = a[n-1][n]/a[n-1][n-1]

    for i in range(n-2,-1,-1):
        x[i] = a[i][n]

        for j in range(i+1,n):
            x[i] = x[i] - a[i][j]*x[j]

        x[i] = x[i]/a[i][i]

    # Displaying solution
    #print('\nRequired solution is: ')
    #for i in range(n):
    #    print('X%d = %0.2f' %(i,x[i]), end = '\t')



    end = time.perf_counter()
    print(f"\n#Time taken is {end - start}")
